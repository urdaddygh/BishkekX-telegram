require("dotenv").config();

const {
  Bot,
  GrammyError,
  HttpError,
  Keyboard,
  InlineKeyboard,
  InputFile,
} = require("grammy");
const texts = require('./texts');

const bot = new Bot(process.env.BOT_API_KEY);
const sessions = new Map();

bot.api.setMyCommands([
  {
    command: "start",
    description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞",
  },
]);

function getSession(userId) {
  if (!sessions.has(userId)) {
    sessions.set(userId, {
      isBankChosen: false,
      isCashWritten: false,
      isOutput: false,
      isRefill: false,
      waitCheck: false,
      isRequisitesWritten: false,
      isXbetKeyWritten: false,
      isAccepted: false,
      isRejected: false,
      waitAnswer:false,
      requisites: '',
      sumMany: '',
      bank: '',
      xbetIdGlobal: '',
      xbetKey: '',
      userId : null,
    });
  }
  return sessions.get(userId);
}

function clearSession(userId) {
  sessions.delete(userId);
}

const outputGroupId = "-4562169457";
const reffilGroupId = "-4598841007";
const infoChannelId = "-1002413010153";
const infoChannelLink = "https://t.me/+GdLPdk4h6oFlOGUy";
const adminTeg = "@BishkeX_BETMEN";
const resolver = "@BishkekX_Kolyan";
const minSumReffill = 35;
const minSumOutput = 150;
const maxSum = 1000000;
const maxRequiredXbetIdCount = 12;
const minRequiredXbetIdCount = 9;
const firstBankName = 'oDengi';
const secondBankName = 'Bakai';
const thirdBankName = 'Optima';

let mbankRequisites = '0500229666';
let optimaRequisites = '4169585353587065';
let bakaiRequisites = '(0500) 047-902';
let oDengiRequisites = '(0706) 425-145';
let shift = '–ù–µ –≤—ã–±—Ä–∞–Ω';

const defaultKeyboard = new Keyboard()
  .text("–ü–û–ü–û–õ–ù–ò–¢–¨")
  .text("–í–´–í–ï–°–¢–ò")
  .row()
  .text("–ö–û–ù–¢–ê–ö–¢–´")
  // .text("–ü–†–ê–í–ò–õ–ê")
  // .row()
  .text("–ë–û–ù–£–°–´")
  .resized();

const cancelKeyboard = new Keyboard().text("–û—Ç–º–µ–Ω–∞").resized();

// bot.command("start", async (ctx) => {
//   // console.log(ctx.from)
//   if (ctx.chat.type !== "group" && ctx.chat.type !== "channel") {
//     clearSession(ctx.from.id);
//     const userId = ctx.from.id;
//     try {
//       // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–∞–Ω–∞–ª–µ
//       const memberInfo = await ctx.api.getChatMember(infoChannelId, userId);

//       // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
//       if (
//         memberInfo.status === "member" ||
//         memberInfo.status === "administrator" ||
//         memberInfo.status === "creator"
//       ) {
//         await ctx.reply(texts.WELCOME, {
//           reply_markup: defaultKeyboard,
          
//         });
//       } else {
//         const inlineKeyboard = new InlineKeyboard().url(
//             "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
//             infoChannelLink
//           )
//         .text("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", "subscribed");

//         await ctx.reply("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å.", {
//           reply_markup:inlineKeyboard
//         });
//       }
//     } catch (error) {
//       // –û—à–∏–±–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
//       await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
//       console.error(error);
//     }
//   }
// });

bot.command("start", async (ctx) => {
  // console.log(ctx.from)
  if (ctx.chat.type !== "group" && ctx.chat.type !== "channel") {
    clearSession(ctx.from.id);
    const userId = ctx.from.id;
        await ctx.reply(texts.WELCOME, {
          reply_markup: defaultKeyboard,
          
        });
  }
});

bot.callbackQuery("subscribed", async (ctx) => {
  clearSession(ctx.from.id);
  if (ctx.chat.type !== "group") {
    const userId = ctx.from.id;
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–∞–Ω–∞–ª–µ
      const memberInfo = await ctx.api.getChatMember(infoChannelId, userId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
      if (
        memberInfo.status === "member" ||
        memberInfo.status === "administrator" ||
        memberInfo.status === "creator"
      ) {
        await ctx.reply(texts.WELCOME, {
          reply_markup: defaultKeyboard,
        });
        await ctx.deleteMessage();
      } else {
        const inlineKeyboard = new InlineKeyboard()
          .url("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", infoChannelLink)
          .text("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", "subscribed");

        await ctx.reply("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å.", {
          reply_markup: inlineKeyboard,
        });
      }
    } catch (error) {
      // –û—à–∏–±–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      console.error(error);
    }
  }
});

// bot.command("edil", async (ctx) => {
//   if (ctx.chat.type === "group") {
//     shift = '–≠–¥–∏–ª';
//     mbankRequisites='0500229666';
//     optimaRequisites='4169585355144709';
//     oDengi = '+996 (504) 061-111';
//     bakaiRequisites='0500229666';
//     await ctx.reply("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≠–¥–∏–ª, –ø–µ—Ä–µ–∫–ª—é—á–∞—é –Ω–∞ –≤–∞—à—É —Å–º–µ–Ω—É");
//   }
// });

// bot.command("daniyar", async (ctx) => {
//   if (ctx.chat.type === "group") {
//     shift = '–î–∞–Ω–∏—è—Ä';
//     mbankRequisites='0504061111';
//     optimaRequisites='4169585351289654';
//     oDengi = '-';
//     bakaiRequisites='7760611111';
//     await ctx.reply("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –î–∞–Ω–∏—è—Ä, –ø–µ—Ä–µ–∫–ª—é—á–∞—é –Ω–∞ –≤–∞—à—É —Å–º–µ–Ω—É");
//   }
// });

// bot.command("test", async (ctx) => {
//   console.log(ctx)
// });

bot.hears("–û—Ç–º–µ–Ω–∞", async (ctx) => {
  if (ctx.chat.type !== "group"&& ctx.chat.type !== "channel") {
    clearSession(ctx.from.id);
    await ctx.reply(texts.WELCOME, {
      reply_markup: defaultKeyboard,
    });
  }
});

bot.hears("–ü–û–ü–û–õ–ù–ò–¢–¨", async (ctx) => {
  const session = getSession(ctx.from.id);
  await ctx.reply("–£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –≤–∞–º —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞", {
    reply_markup: {
      keyboard: cancelKeyboard.build(),
      one_time_keyboard: true,
      resize_keyboard: true,
    },
  });
  // console.log("after", session);
  const inlineKeyboard = new InlineKeyboard()
    // .text("MBANK", "mbank_button")
    .text(texts.ODENGI, "first_reffil_button")
    .text(texts.BAKAI, "second_reffil_button")
    .text(texts.OPTIMA, "third_reffil_button");

  session.isRefill = true;

  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", {
    reply_markup: inlineKeyboard,
  });
});

bot.callbackQuery("first_reffil_button", async (ctx) => {
  const session = getSession(ctx.from.id);
    await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ ${texts.ODENGI}, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è(–°–û–ú)`);
    session.isBankChosen = true;
    session.bank = firstBankName;
    await ctx.deleteMessage();
});
bot.callbackQuery("second_reffil_button", async (ctx) => {
  const session = getSession(ctx.from.id);
    await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ ${texts.BAKAI}, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è(–°–û–ú)`);
    session.isBankChosen = true;
    session.bank = secondBankName;
    await ctx.deleteMessage();
});
bot.callbackQuery("third_reffil_button", async (ctx) => {
  const session = getSession(ctx.from.id);
    await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ ${texts.OPTIMA}, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è(–°–û–ú)`);
    session.isBankChosen = true;
    session.bank = thirdBankName;
    await ctx.deleteMessage();
});

bot.hears("–í–´–í–ï–°–¢–ò", async (ctx) => {
  await ctx.reply("–£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –≤–∞–º —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤", {
    reply_markup: {
      keyboard: cancelKeyboard.build(),
      one_time_keyboard: true,
      resize_keyboard: true,
    },
  });

  const inlineKeyboard = new InlineKeyboard()
    .text(texts.ODENGI, "first_output_button")
    .text(texts.BAKAI, "second_output_button")
    .text(texts.OPTIMA, "third_output_button");
    const session = getSession(ctx.from.id);

    session.isOutput = true;

  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", {
    reply_markup: inlineKeyboard,
  });
});

bot.callbackQuery("first_output_button", async (ctx) => {
  const session = getSession(ctx.from.id);
  await ctx.reply(texts.ENTER_REQUISITES_BY_BANK);
  session.isBankChosen = true;
  session.bank = firstBankName;
});
bot.callbackQuery("second_output_button", async (ctx) => {
  const session = getSession(ctx.from.id);
  await ctx.reply(texts.ENTER_REQUISITES_BY_BANK);
  session.isBankChosen = true;
  session.bank = secondBankName;
});
bot.callbackQuery("third_output_button", async (ctx) => {
  const session = getSession(ctx.from.id);
  await ctx.reply(texts.ENTER_REQUISITES_BY_BANK);
  session.isBankChosen = true;
  session.bank = thirdBankName;
  // console.log(session);
});

bot.hears("–ö–û–ù–¢–ê–ö–¢–´", async (ctx) => {
  await ctx.reply(`–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ–¥–Ω–æ–º—É –∏–∑ —ç—Ç–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:\n–ê–¥–º–∏–Ω: ${adminTeg}\n–†–µ—à–∞–ª–∞: ${resolver}`, {
    // reply_markup: {
    //   keyboard: cancelKeyboard.build(),
    //   one_time_keyboard: true,
    //   resize_keyboard: true,
    // },
  });
});

// bot.hears("–ü–†–ê–í–ò–õ–ê", async (ctx) => {
//   await ctx.reply(`–ü—Ä–∞–≤–∏–ª –ø–æ–∫–∞ –Ω–µ—Ç`, {
//     // reply_markup: {
//     //   keyboard: cancelKeyboard.build(),
//     //   one_time_keyboard: true,
//     //   resize_keyboard: true,
//     // },
//   });
// });
bot.hears("–ë–û–ù–£–°–´", async (ctx) => {
  await ctx.replyWithVideo(new InputFile("video/bonus.mp4"), {
    caption: "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: üéÅ\nBISHKEKX\n–ò –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å —Ö2 –∫ –ø–µ—Ä–≤–æ–º—É –¥–µ–ø–æ–∑–∏—Ç—É üéÅ\n\n500 * 2 = 1000 —Å–æ–º\n2000 * 2 = 4000 co–º"
  });
});

bot.on("callback_query:data", async (ctx) => {
  const callbackData = ctx.callbackQuery.data;
  const [action, userId] = callbackData.split("_");  // –†–∞–∑–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let userIdToNumber;
  // console.log(session);
  if (!isNaN(Number(userId))) {
    userIdToNumber = parseInt(userId);
    // console.log("parse to int = ", typeof textToNumber);
  }
  const session = getSession(userIdToNumber);
  // console.log(userIdToNumber);
  // console.log(session);
  if (typeof userIdToNumber === "number"){
    if(session.isRefill && session.waitAnswer){
      if (action === "accept") {
        await bot.api.sendMessage(userId, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ—à–ª–∞‚úÖ");
      } else if (action === "reject") {
        await bot.api.sendMessage(userId, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞‚ùå");
      }
      await ctx.editMessageReplyMarkup({
        reply_markup: null,  // –û—á–∏—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      });
      session.isRefill = false;
      session.waitAnswer = false;
      clearSession(userIdToNumber);
    }
  }else{
    console.log('userId is not number = ', userIdToNumber)
  }
});

bot.on(":photo", async (ctx) => {
  const session = getSession(ctx.from.id);
  const userInfo = ctx.from;
  // const userId = userInfo.id;
  const photos = ctx.message.photo;
  // –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ)

  const highestQualityPhoto = photos[photos.length - 1];
  if (session.waitCheck && session.isRefill) {
    const caption = `–ß–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n–ò–º—è: ${
      userInfo?.first_name ?? "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    }\n–õ–æ–≥–∏–Ω: ${userInfo?.username ?? "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}\n–ß–∞—Ç ID: ${
      ctx.from.id
    }\n\n1XBET ID: ${session.xbetIdGlobal}\n–°–ø–æ—Å–æ–±: ${
      session.bank
    }\n–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${session.sumMany}\n\n–°–º–µ–Ω–∞: ${shift}`;
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É

    const acceptRejectKeyboard = new InlineKeyboard()
      .text("–ü—Ä–∏–Ω—è—Ç—å", `accept_${ctx.from.id}`)
      .text("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", `reject_${ctx.from.id}`);

      session.waitCheck = false;
      session.waitAnswer = true;
      session.userId = ctx.from.id; 

    await bot.api.sendPhoto(reffilGroupId, highestQualityPhoto.file_id, {
      caption: caption,
      reply_markup: acceptRejectKeyboard,
    });
    // console.log(ctx.from.id);
    // console.log(session);
    return await ctx.reply("–û—Ç–ª–∏—á–Ω–æ! –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞", {
      reply_markup:{remove_keyboard:true}
    });
  }
});

bot.on("msg:text", async (ctx) => {
  const session = getSession(ctx.from.id);
  const userInfo = ctx.update.message.from;
  const text = ctx.update.message.text;
  let textToNumber;
  // console.log(session);
  if (!isNaN(Number(text))) {
    textToNumber = parseInt(text);
    // console.log("parse to int = ", typeof textToNumber);
  }
  // console.log(ctx);
  
  if (session.isBankChosen && session.isRefill) {
    if (typeof textToNumber === "number") {
      //   console.log("text is number");
      if (textToNumber >= minSumReffill && textToNumber <= maxSum) {
        session.isBankChosen = false;
        session.isCashWritten = true;
        session.sumMany = textToNumber;
        await ctx.reply(texts.ENTER_XBET_ID);
        return await ctx.replyWithPhoto(new InputFile("img/example.jpg"));
      } else {
        await ctx.reply(
          `–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ \n\n–ú–∏–Ω–∏–º—É–º: ${minSumReffill} —Å–æ–º\n–ú–∞–∫—Å–∏–º—É–º: ${maxSum} —Å–æ–º`
        );
      }
    } else {
      await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏");
    }
  }

  if (session.isCashWritten&&session.isRefill) {
    if (typeof textToNumber === "number") {
      // console.log("text is number");
      if (text.length >= minRequiredXbetIdCount && text.length<=maxRequiredXbetIdCount) {
        // console.log(text.length, "–∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤");
        session.isCashWritten = false;
        session.xbetIdGlobal = text;
          if (session.bank === firstBankName) {
            // await ctx.reply(
            //   `–ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ MBANK –ø–æ –Ω–∏–∂–µ—É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ä–µ–∫–≤–∏–∑–∏—Ç—Éüëá\nMBANK: ${mbankRequisites}\n–°—É–º–º–∞: ${session.sumMany}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞`
            // );
            await ctx.reply(
              `–ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ ${texts.ODENGI} –ø–æ –Ω–∏–∂–µ—É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ä–µ–∫–≤–∏–∑–∏—Ç—Éüëá\n${texts.ODENGI}: ${oDengiRequisites}\n–°—É–º–º–∞: ${session.sumMany}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞`
            );
          }
          if (session.bank === secondBankName) {
            await ctx.reply(
              `–ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ Bakai –ø–æ –Ω–∏–∂–µ—É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ä–µ–∫–≤–∏–∑–∏—Ç—Éüëá\nBakai: ${bakaiRequisites}\n–°—É–º–º–∞: ${session.sumMany}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞`
            );
          }
          if (session.bank === thirdBankName) {
            await ctx.reply(
              `–ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ Optima –ø–æ –Ω–∏–∂–µ—É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ä–µ–∫–≤–∏–∑–∏—Ç—Éüëá\nOptima: ${optimaRequisites}\n–°—É–º–º–∞: ${session.sumMany}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞`
            );
          }
          return (session.waitCheck = true);
      } else {
        await ctx.reply(`–ö–æ–ª-–≤–æ —Ü–∏—Ñ—Ä –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ ${minRequiredXbetIdCount} –∏–ª–∏ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ ${maxRequiredXbetIdCount}`);
      }
    } else {
      await ctx.reply("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã");
    }
  }

  if (session.isOutput&&session.isCashWritten) {
    session.xbetKey = text;
    await bot.api.sendMessage(
      outputGroupId,
      `–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞.\n–ò–º—è: ${
        userInfo?.first_name ?? "–û—Ç—Å—É—Å—Ç–≤—É–µ—Ç"
      }\n–õ–æ–≥–∏–Ω: ${
        userInfo?.username ?? "–û—Ç—Å—É—Å—Ç–≤—É–µ—Ç"
      }\n\n1XBET ID: ${session.xbetIdGlobal}\n1XBET –∫–æ–¥: ${session.xbetKey}\n–°–ø–æ—Å–æ–±: ${session.bank}\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: ${session.requisites}\n–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: ${session.sumMany}\n\n\n–°–º–µ–Ω–∞: ${shift}`
    );
    return await ctx.reply(
      "–°—É–ø–µ—Ä‚úÖ! –û–∂–∏–¥–∞–π—Ç–µ.",
      {
        reply_markup: {remove_keyboard:true},
      }
    );
  }

  if(session.isRefill && session.waitCheck){
    return await ctx.reply(
      `–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞!`
    );
  }

  if (session.isOutput && session.isRequisitesWritten) {
    if (typeof textToNumber === "number") {
      //   console.log("text is number");
      if (textToNumber >= minSumOutput && textToNumber <= maxSum) {
        session.isRequisitesWritten = false;
        session.isXbetKeyWritten = true;
        session.sumMany = textToNumber;
        await ctx.reply(texts.ENTER_XBET_ID);
        return await ctx.replyWithPhoto(new InputFile("img/example.jpg"));
      } else {
        await ctx.reply(
          `–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ \n\n–ú–∏–Ω–∏–º—É–º: ${minSumOutput} —Å–æ–º\n–ú–∞–∫—Å–∏–º—É–º: ${maxSum} —Å–æ–º`
        );
      }
    } else {
      await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏");
    }
  }

  if (session.isOutput && session.isXbetKeyWritten) {
    if (typeof textToNumber === "number") {
      if(text.length >= minRequiredXbetIdCount && text.length<=maxRequiredXbetIdCount){
        session.isXbetKeyWritten = false;
        session.isCashWritten = true;
        session.xbetIdGlobal = text;
        await ctx.api.sendMediaGroup(ctx.chat.id, [
          {
            type: "photo",
            media: new InputFile("img/output_first.jpg"),
            caption: "–í—ã–±–µ—Ä–∏—Ç–µ –≤ 1XBET —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏, –ø–æ—Ç–æ–º –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª: BishkekX (24/7)",
          },
          {
            type: "photo",
            media: new InputFile("img/output_second.jpg"),
          },
        ]);
        // await ctx.replyWithPhoto(new InputFile("img/example.jpg"), {
        //   caption:""
        // });
        return await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –¥–∞–ª 1XBET");
      }else{
        await ctx.reply(`–ö–æ–ª-–≤–æ —Ü–∏—Ñ—Ä –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ ${minRequiredXbetIdCount} –∏–ª–∏ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ ${maxRequiredXbetIdCount}`);
      }
    } else {
      await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏");
    }
  }

  if (session.isOutput && session.isBankChosen) {
    session.isRequisitesWritten = true;
    session.isBankChosen = false;
    session.requisites = text;
    return await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤(–°–û–ú)");
  }
  
  if(session.waitAnswer&&session.isRefill){
    return await ctx.reply("–ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–∫...");
  }
});

bot.on("msg", async (ctx)=>{
  const session = getSession(ctx.from.id);
  // console.log('—á–µ —Ç–∞–º', session.waitAnswer)
  if(session.waitAnswer&&session.isRefill){
    return await ctx.reply("–ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–∫...");
  }
})

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
  } else {
    console.error("Unknown error:", e);
  }
});

bot.start();